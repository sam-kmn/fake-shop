{"ast":null,"code":"import { HTTPError } from '../errors/HTTPError.js';\nimport { TimeoutError } from '../errors/TimeoutError.js';\nimport { deepMerge, mergeHeaders } from '../utils/merge.js';\nimport { normalizeRequestMethod, normalizeRetryOptions } from '../utils/normalize.js';\nimport { delay, timeout } from '../utils/time.js';\nimport { maxSafeTimeout, responseTypes, stop, supportsAbortController, supportsFormData, supportsStreams } from './constants.js';\nexport class Ky {\n  // eslint-disable-next-line complexity\n  constructor(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a, _b, _c;\n\n    this._retryCount = 0;\n    this._input = input;\n    this._options = {\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin',\n      ...options,\n      headers: mergeHeaders(this._input.headers, options.headers),\n      hooks: deepMerge({\n        beforeRequest: [],\n        beforeRetry: [],\n        beforeError: [],\n        afterResponse: []\n      }, options.hooks),\n      method: normalizeRequestMethod((_a = options.method) !== null && _a !== void 0 ? _a : this._input.method),\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: normalizeRetryOptions(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: (_b = options.fetch) !== null && _b !== void 0 ? _b : globalThis.fetch.bind(globalThis)\n    };\n\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n    }\n\n    if (supportsAbortController) {\n      this.abortController = new globalThis.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this.request = new globalThis.Request(this._input, this._options);\n\n    if (this._options.searchParams) {\n      // eslint-disable-next-line unicorn/prevent-abbreviations\n      const textSearchParams = typeof this._options.searchParams === 'string' ? this._options.searchParams.replace(/^\\?/, '') : new URLSearchParams(this._options.searchParams).toString(); // eslint-disable-next-line unicorn/prevent-abbreviations\n\n      const searchParams = '?' + textSearchParams;\n      const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams); // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\n      if ((supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n\n      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n    }\n\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', (_c = this._options.headers.get('content-type')) !== null && _c !== void 0 ? _c : 'application/json');\n      this.request = new globalThis.Request(this.request, {\n        body: this._options.body\n      });\n    }\n  } // eslint-disable-next-line @typescript-eslint/promise-function-async\n\n\n  static create(input, options) {\n    const ky = new Ky(input, options);\n\n    const fn = async () => {\n      if (ky._options.timeout > maxSafeTimeout) {\n        throw new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n      } // Delay the fetch so that body method shortcuts can set the Accept header\n\n\n      await Promise.resolve();\n      let response = await ky._fetch();\n\n      for (const hook of ky._options.hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n\n        if (modifiedResponse instanceof globalThis.Response) {\n          response = modifiedResponse;\n        }\n      }\n\n      ky._decorateResponse(response);\n\n      if (!response.ok && ky._options.throwHttpErrors) {\n        let error = new HTTPError(response, ky.request, ky._options);\n\n        for (const hook of ky._options.hooks.beforeError) {\n          // eslint-disable-next-line no-await-in-loop\n          error = await hook(error);\n        }\n\n        throw error;\n      } // If `onDownloadProgress` is passed, it uses the stream API internally\n\n      /* istanbul ignore next */\n\n\n      if (ky._options.onDownloadProgress) {\n        if (typeof ky._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n\n        if (!supportsStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n\n        return ky._stream(response.clone(), ky._options.onDownloadProgress);\n      }\n\n      return response;\n    };\n\n    const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\n    const result = isRetriableMethod ? ky._retry(fn) : fn();\n\n    for (const [type, mimeType] of Object.entries(responseTypes)) {\n      result[type] = async () => {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n        const awaitedResult = await result;\n        const response = awaitedResult.clone();\n\n        if (type === 'json') {\n          if (response.status === 204) {\n            return '';\n          }\n\n          if (options.parseJson) {\n            return options.parseJson(await response.text());\n          }\n        }\n\n        return response[type]();\n      };\n    }\n\n    return result;\n  }\n\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n\n    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n      if (error instanceof HTTPError) {\n        if (!this._options.retry.statusCodes.includes(error.response.status)) {\n          return 0;\n        }\n\n        const retryAfter = error.response.headers.get('Retry-After');\n\n        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n          let after = Number(retryAfter);\n\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n\n          return after;\n        }\n\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n\n    return 0;\n  }\n\n  _decorateResponse(response) {\n    if (this._options.parseJson) {\n      response.json = async () => this._options.parseJson(await response.text());\n    }\n\n    return response;\n  }\n\n  async _retry(fn) {\n    try {\n      return await fn(); // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n    } catch (error) {\n      const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\n      if (ms !== 0 && this._retryCount > 0) {\n        await delay(ms);\n\n        for (const hook of this._options.hooks.beforeRetry) {\n          // eslint-disable-next-line no-await-in-loop\n          const hookResult = await hook({\n            request: this.request,\n            options: this._options,\n            error: error,\n            retryCount: this._retryCount\n          }); // If `stop` is returned from the hook, the retry process is stopped\n\n          if (hookResult === stop) {\n            return;\n          }\n        }\n\n        return this._retry(fn);\n      }\n\n      throw error;\n    }\n  }\n\n  async _fetch() {\n    for (const hook of this._options.hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this.request, this._options);\n\n      if (result instanceof Request) {\n        this.request = result;\n        break;\n      }\n\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n\n    if (this._options.timeout === false) {\n      return this._options.fetch(this.request.clone());\n    }\n\n    return timeout(this.request.clone(), this.abortController, this._options);\n  }\n  /* istanbul ignore next */\n\n\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    return new globalThis.Response(new globalThis.ReadableStream({\n      async start(controller) {\n        const reader = response.body.getReader();\n\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n\n          controller.enqueue(value);\n          await read();\n        }\n\n        await read();\n      }\n\n    }));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["HTTPError","TimeoutError","deepMerge","mergeHeaders","normalizeRequestMethod","normalizeRetryOptions","delay","timeout","maxSafeTimeout","responseTypes","stop","supportsAbortController","supportsFormData","supportsStreams","Ky","constructor","input","options","_input","_options","credentials","headers","hooks","beforeRequest","beforeRetry","beforeError","afterResponse","method","_a","prefixUrl","String","retry","throwHttpErrors","fetch","_b","globalThis","bind","URL","Request","TypeError","startsWith","Error","endsWith","abortController","AbortController","signal","addEventListener","abort","request","searchParams","textSearchParams","replace","URLSearchParams","toString","url","body","FormData","delete","json","undefined","JSON","stringify","set","get","_c","create","ky","fn","RangeError","Promise","resolve","response","_fetch","hook","modifiedResponse","_decorateResponse","clone","Response","ok","error","onDownloadProgress","_stream","isRetriableMethod","methods","includes","toLowerCase","result","_retry","type","mimeType","Object","entries","awaitedResult","status","parseJson","text","_calculateRetryDelay","_retryCount","limit","statusCodes","retryAfter","afterStatusCodes","after","Number","isNaN","Date","parse","now","maxRetryAfter","BACKOFF_FACTOR","ms","Math","min","hookResult","retryCount","totalBytes","transferredBytes","ReadableStream","start","controller","reader","getReader","percent","Uint8Array","read","done","value","close","byteLength","enqueue"],"sources":["/Users/sam/WebDev/React/fake-shop/node_modules/ky/source/core/Ky.ts"],"sourcesContent":["import {HTTPError} from '../errors/HTTPError.js';\nimport {TimeoutError} from '../errors/TimeoutError.js';\nimport type {Hooks} from '../types/hooks.js';\nimport type {Input, InternalOptions, NormalizedOptions, Options, SearchParamsInit} from '../types/options.js';\nimport {ResponsePromise} from '../types/response.js';\nimport {deepMerge, mergeHeaders} from '../utils/merge.js';\nimport {normalizeRequestMethod, normalizeRetryOptions} from '../utils/normalize.js';\nimport {delay, timeout, TimeoutOptions} from '../utils/time.js';\nimport {ObjectEntries} from '../utils/types.js';\nimport {maxSafeTimeout, responseTypes, stop, supportsAbortController, supportsFormData, supportsStreams} from './constants.js';\n\nexport class Ky {\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tstatic create(input: Input, options: Options): ResponsePromise {\n\t\tconst ky = new Ky(input, options);\n\n\t\tconst fn = async (): Promise<Response> => {\n\t\t\tif (ky._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\t// Delay the fetch so that body method shortcuts can set the Accept header\n\t\t\tawait Promise.resolve();\n\t\t\tlet response = await ky._fetch();\n\n\t\t\tfor (const hook of ky._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tky.request,\n\t\t\t\t\tky._options as NormalizedOptions,\n\t\t\t\t\tky._decorateResponse(response.clone()),\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tky._decorateResponse(response);\n\n\t\t\tif (!response.ok && ky._options.throwHttpErrors) {\n\t\t\t\tlet error = new HTTPError(response, ky.request, (ky._options as unknown) as NormalizedOptions);\n\n\t\t\t\tfor (const hook of ky._options.hooks.beforeError) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\terror = await hook(error);\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (ky._options.onDownloadProgress) {\n\t\t\t\tif (typeof ky._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn ky._stream(response.clone(), ky._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\t\tconst result = (isRetriableMethod ? ky._retry(fn) : fn()) as ResponsePromise;\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes) as ObjectEntries<typeof responseTypes>) {\n\t\t\tresult[type] = async () => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\t\tky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst awaitedResult = await result;\n\t\t\t\tconst response = awaitedResult.clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic request: Request;\n\tprotected abortController?: AbortController;\n\tprotected _retryCount = 0;\n\tprotected _input: Input;\n\tprotected _options: InternalOptions;\n\n\t// eslint-disable-next-line complexity\n\tconstructor(input: Input, options: Options = {}) {\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: (this._input as Request).credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders((this._input as Request).headers, options.headers),\n\t\t\thooks: deepMerge<Required<Hooks>>(\n\t\t\t\t{\n\t\t\t\t\tbeforeRequest: [],\n\t\t\t\t\tbeforeRetry: [],\n\t\t\t\t\tbeforeError: [],\n\t\t\t\t\tafterResponse: [],\n\t\t\t\t},\n\t\t\t\toptions.hooks,\n\t\t\t),\n\t\t\tmethod: normalizeRequestMethod(options.method ?? (this._input as Request).method),\n\t\t\t// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10_000 : options.timeout,\n\t\t\tfetch: options.fetch ?? globalThis.fetch.bind(globalThis),\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController!.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input as RequestInfo, this._options as RequestInit);\n\n\t\tif (this._options.searchParams) {\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string'\n\t\t\t\t? this._options.searchParams.replace(/^\\?/, '')\n\t\t\t\t: new URLSearchParams(this._options.searchParams as unknown as SearchParamsInit).toString();\n\t\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (\n\t\t\t\t((supportsFormData && this._options.body instanceof globalThis.FormData)\n\t\t\t\t|| this._options.body instanceof URLSearchParams) && !(this._options.headers && (this._options.headers as Record<string, string>)['content-type'])\n\t\t\t) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options as RequestInit);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', this._options.headers.get('content-type') ?? 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\t}\n\n\tprotected _calculateRetryDelay(error: unknown) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tprotected _decorateResponse(response: Response): Response {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => this._options.parseJson!(await response.text());\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tprotected async _retry<T extends (...args: any) => Promise<any>>(fn: T): Promise<ReturnType<T> | void> {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: (this._options as unknown) as NormalizedOptions,\n\t\t\t\t\t\terror: error as Error,\n\t\t\t\t\t\tretryCount: this._retryCount,\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprotected async _fetch(): Promise<Response> {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, (this._options as unknown) as NormalizedOptions);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options as TimeoutOptions);\n\t}\n\n\t/* istanbul ignore next */\n\tprotected _stream(response: Response, onDownloadProgress: Options['onDownloadProgress']) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body!.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}