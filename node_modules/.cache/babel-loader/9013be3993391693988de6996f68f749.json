{"ast":null,"code":"import { requestMethods } from '../core/constants.js';\nexport const normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes,\n  maxRetryAfter: Number.POSITIVE_INFINITY\n};\nexport const normalizeRetryOptions = function () {\n  let retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (typeof retry === 'number') {\n    return { ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return { ...defaultRetryOptions,\n    ...retry,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n};","map":{"version":3,"mappings":"AAAA,SAAQA,cAAR,QAA6B,sBAA7B;AAIA,OAAO,MAAMC,sBAAsB,GAAIC,KAAD,IACrCF,cAAc,CAACG,QAAf,CAAwBD,KAAxB,IAA+CA,KAAK,CAACE,WAAN,EAA/C,GAAqEF,KAD/D;AAGP,MAAMG,YAAY,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,OAA5C,CAArB;AAEA,MAAMC,gBAAgB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAzB;AAEA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA9B;AAEA,MAAMC,mBAAmB,GAA2B;AACnDC,OAAK,EAAE,CAD4C;AAEnDC,SAAO,EAAEL,YAF0C;AAGnDM,aAAW,EAAEL,gBAHsC;AAInDM,kBAAgB,EAAEL,qBAJiC;AAKnDM,eAAa,EAAEC,MAAM,CAACC;AAL6B,CAApD;AAQA,OAAO,MAAMC,qBAAqB,GAAG,YAA8D;AAAA,MAA7DC,KAA6D,uEAA9B,EAA8B;;AAClG,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAO,EACN,GAAGT,mBADG;AAENC,WAAK,EAAEQ;AAFD,KAAP;AAIA;;AAED,MAAIA,KAAK,CAACP,OAAN,IAAiB,CAACQ,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACP,OAApB,CAAtB,EAAoD;AACnD,UAAM,IAAIU,KAAJ,CAAU,gCAAV,CAAN;AACA;;AAED,MAAIH,KAAK,CAACN,WAAN,IAAqB,CAACO,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACN,WAApB,CAA1B,EAA4D;AAC3D,UAAM,IAAIS,KAAJ,CAAU,oCAAV,CAAN;AACA;;AAED,SAAO,EACN,GAAGZ,mBADG;AAEN,OAAGS,KAFG;AAGNL,oBAAgB,EAAEL;AAHZ,GAAP;AAKA,CArBM","names":["requestMethods","normalizeRequestMethod","input","includes","toUpperCase","retryMethods","retryStatusCodes","retryAfterStatusCodes","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","maxRetryAfter","Number","POSITIVE_INFINITY","normalizeRetryOptions","retry","Array","isArray","Error"],"sources":["/Users/sam/WebDev/React/fake-shop/node_modules/ky/source/utils/normalize.ts"],"sourcesContent":["import {requestMethods} from '../core/constants.js';\nimport type {HttpMethod} from '../types/options.js';\nimport type {RetryOptions} from '../types/retry.js';\n\nexport const normalizeRequestMethod = (input: string): string =>\n\trequestMethods.includes(input as HttpMethod) ? input.toUpperCase() : input;\n\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\n\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\n\nconst retryAfterStatusCodes = [413, 429, 503];\n\nconst defaultRetryOptions: Required<RetryOptions> = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes,\n\tmaxRetryAfter: Number.POSITIVE_INFINITY,\n};\n\nexport const normalizeRetryOptions = (retry: number | RetryOptions = {}): Required<RetryOptions> => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry,\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}