{"ast":null,"code":"import { isObject } from './is.js';\nexport const validateAndMerge = function () {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  for (const source of sources) {\n    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n\n  return deepMerge({}, ...sources);\n};\nexport const mergeHeaders = function () {\n  let source1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let source2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = new globalThis.Headers(source1);\n  const isHeadersInstance = source2 instanceof globalThis.Headers;\n  const source = new globalThis.Headers(source2);\n\n  for (const [key, value] of source.entries()) {\n    if (isHeadersInstance && value === 'undefined' || value === undefined) {\n      result.delete(key);\n    } else {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n}; // TODO: Make this strongly-typed (no `any`).\n\nexport const deepMerge = function () {\n  let returnValue = {};\n  let headers = {};\n\n  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    sources[_key2] = arguments[_key2];\n  }\n\n  for (const source of sources) {\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n\n      returnValue = [...returnValue, ...source];\n    } else if (isObject(source)) {\n      for (let [key, value] of Object.entries(source)) {\n        if (isObject(value) && key in returnValue) {\n          value = deepMerge(returnValue[key], value);\n        }\n\n        returnValue = { ...returnValue,\n          [key]: value\n        };\n      }\n\n      if (isObject(source.headers)) {\n        headers = mergeHeaders(headers, source.headers);\n        returnValue.headers = headers;\n      }\n    }\n  }\n\n  return returnValue;\n};","map":{"version":3,"mappings":"AACA,SAAQA,QAAR,QAAuB,SAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,YAAsE;AAAA,oCAAlEC,OAAkE;AAAlEA,WAAkE;AAAA;;AACrG,OAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC7B,QAAI,CAAC,CAACF,QAAQ,CAACG,MAAD,CAAT,IAAqBC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAtB,KAAgD,OAAOA,MAAP,KAAkB,WAAtE,EAAmF;AAClF,YAAM,IAAIG,SAAJ,CAAc,0CAAd,CAAN;AACA;AACD;;AAED,SAAOC,SAAS,CAAC,EAAD,EAAK,GAAGL,OAAR,CAAhB;AACA,CARM;AAUP,OAAO,MAAMM,YAAY,GAAG,YAA6D;AAAA,MAA5DC,OAA4D,uEAAnC,EAAmC;AAAA,MAA/BC,OAA+B,uEAAN,EAAM;AACxF,QAAMC,MAAM,GAAG,IAAIC,UAAU,CAACC,OAAf,CAAuBJ,OAAvB,CAAf;AACA,QAAMK,iBAAiB,GAAGJ,OAAO,YAAYE,UAAU,CAACC,OAAxD;AACA,QAAMV,MAAM,GAAG,IAAIS,UAAU,CAACC,OAAf,CAAuBH,OAAvB,CAAf;;AAEA,OAAK,MAAM,CAACK,GAAD,EAAMC,KAAN,CAAX,IAA2Bb,MAAM,CAACc,OAAP,EAA3B,EAA6C;AAC5C,QAAKH,iBAAiB,IAAIE,KAAK,KAAK,WAAhC,IAAgDA,KAAK,KAAKE,SAA9D,EAAyE;AACxEP,YAAM,CAACQ,MAAP,CAAcJ,GAAd;AACA,KAFD,MAEO;AACNJ,YAAM,CAACS,GAAP,CAAWL,GAAX,EAAgBC,KAAhB;AACA;AACD;;AAED,SAAOL,MAAP;AACA,CAdM,C,CAgBP;;AACA,OAAO,MAAMJ,SAAS,GAAG,YAAoD;AAC5E,MAAIc,WAAW,GAAQ,EAAvB;AACA,MAAIC,OAAO,GAAG,EAAd;;AAF4E,qCAA7CpB,OAA6C;AAA7CA,WAA6C;AAAA;;AAI5E,OAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC7B,QAAIE,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AAC1B,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcgB,WAAd,CAAL,EAAiC;AAChCA,mBAAW,GAAG,EAAd;AACA;;AAEDA,iBAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB,GAAGlB,MAApB,CAAd;AACA,KAND,MAMO,IAAIH,QAAQ,CAACG,MAAD,CAAZ,EAAsB;AAC5B,WAAK,IAAI,CAACY,GAAD,EAAMC,KAAN,CAAT,IAAyBO,MAAM,CAACN,OAAP,CAAed,MAAf,CAAzB,EAAiD;AAChD,YAAIH,QAAQ,CAACgB,KAAD,CAAR,IAAmBD,GAAG,IAAIM,WAA9B,EAA2C;AAC1CL,eAAK,GAAGT,SAAS,CAACc,WAAW,CAACN,GAAD,CAAZ,EAAmBC,KAAnB,CAAjB;AACA;;AAEDK,mBAAW,GAAG,EAAC,GAAGA,WAAJ;AAAiB,WAACN,GAAD,GAAOC;AAAxB,SAAd;AACA;;AAED,UAAIhB,QAAQ,CAAEG,MAAc,CAACmB,OAAjB,CAAZ,EAAuC;AACtCA,eAAO,GAAGd,YAAY,CAACc,OAAD,EAAWnB,MAAc,CAACmB,OAA1B,CAAtB;AACAD,mBAAW,CAACC,OAAZ,GAAsBA,OAAtB;AACA;AACD;AACD;;AAED,SAAOD,WAAP;AACA,CA5BM","names":["isObject","validateAndMerge","sources","source","Array","isArray","TypeError","deepMerge","mergeHeaders","source1","source2","result","globalThis","Headers","isHeadersInstance","key","value","entries","undefined","delete","set","returnValue","headers","Object"],"sources":["/Users/sam/WebDev/React/fake-shop/node_modules/ky/source/utils/merge.ts"],"sourcesContent":["import type {KyHeadersInit, Options} from '../types/options.js';\nimport {isObject} from './is.js';\n\nexport const validateAndMerge = (...sources: Array<Partial<Options> | undefined>): Partial<Options> => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nexport const mergeHeaders = (source1: KyHeadersInit = {}, source2: KyHeadersInit = {}) => {\n\tconst result = new globalThis.Headers(source1 as HeadersInit);\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 as HeadersInit);\n\n\tfor (const [key, value] of source.entries()) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n// TODO: Make this strongly-typed (no `any`).\nexport const deepMerge = <T>(...sources: Array<Partial<T> | undefined>): T => {\n\tlet returnValue: any = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!Array.isArray(returnValue)) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && key in returnValue) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject((source as any).headers)) {\n\t\t\t\theaders = mergeHeaders(headers, (source as any).headers);\n\t\t\t\treturnValue.headers = headers;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n"]},"metadata":{},"sourceType":"module"}